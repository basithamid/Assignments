package com.spring.advertisement.dao;

import java.text.DateFormat;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.orm.hibernate5.support.HibernateDaoSupport;
import org.springframework.transaction.annotation.Transactional;

import com.spring.advertisement.collection.SessionCollection;
import com.spring.advertisement.entity.Actions;
import com.spring.advertisement.entity.Categories;
import com.spring.advertisement.entity.PostAd;
import com.spring.advertisement.entity.User;
import com.spring.advertisement.entity.UserLogin;
import com.spring.advertisement.table.UserSession;

import org.hibernate.Query;
//import com.spring.advertisement.repository.ItemRepository;
//import com.spring.advertisement.repository.SessionRepository;
//import com.spring.advertisement.repository.UserRepository;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

public class UserHibernateDaoImpl extends HibernateDaoSupport implements UserDao {

	@Transactional
	public User createUser(User user) {
		List<User> existingUsers;
		existingUsers = (List<User>)getHibernateTemplate().find("from User where userName =?", user.getUserName());
		System.out.println("existing users:"+existingUsers);
		if(existingUsers.isEmpty()){
			getHibernateTemplate().save(user);
			return user;
		}
		return null;
		
	}
	
	public List<Categories> getCategories() {
		List<Categories> categories = (List<Categories>) getHibernateTemplate().find("from Categories");
		System.out.println(categories);
		return categories;
	}
	
	@Transactional
	public String login(UserLogin user){
		String userName = user.getUname();
		String pass = user.getPwd();
		List<User> userLogin = (List<User>)getHibernateTemplate().find("from User where userName =? AND password=?", userName, pass);
		if(!userLogin.isEmpty()){
			System.out.println("login details"+ userLogin);
			DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
			Date date = new Date();
			System.out.println(dateFormat.format(date)); //2016/11/16 12:08:43
			String id = UUID.randomUUID().toString();
			UserSession userSession = new UserSession(id ,userName, date);
			getHibernateTemplate().save(userSession);
			return id;
		}
		return null;
	}
	
	@Transactional
	public void logout(String authToken) {
		List<UserSession> loggedInUsers = (List<UserSession>) getHibernateTemplate().find("from UserSession where sessionId =?", authToken );
		System.out.println("list of logged in users: "+loggedInUsers);
		UserSession user = loggedInUsers.get(0);
		getHibernateTemplate().delete(user);
	}

	public List<Actions> getActions(String authToken) {
		List<UserSession> loggenInUser = (List<UserSession>) getHibernateTemplate().find("from UserSession where sessionId =?", authToken );
		if(!loggenInUser.isEmpty()){
			List<Actions> actions = (List<Actions>) getHibernateTemplate().find("from Actions");
			return actions;
		}
		return null;
	}

	public User getUser(String authToken, String userName) {
		List<UserSession> loggenInUser = (List<UserSession>) getHibernateTemplate().find("from UserSession where sessionId =? ", authToken);
		if(!loggenInUser.isEmpty()){
			System.out.println("loggedInUser: "+loggenInUser);
			List<User> userDetails = (List<User>) getHibernateTemplate().find("from User where userName=?", userName);
			return userDetails.get(0);
		}
		return null;
	}

	public PostAd postAdvertisement(String authToken, PostAd ad) {
		List<UserSession> loggenInUser = (List<UserSession>) getHibernateTemplate().find("from UserSession where sessionId =? ", authToken);
		if(!loggenInUser.isEmpty()){
			String cName = ad.getCategory().getCategoryName();
			getHibernateTemplate().save(ad);
		}
		return null;
	}

	
	

}
